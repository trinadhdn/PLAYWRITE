steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download environment artifact'
    inputs:
      artifact: 'environment'

  - powershell: |
      $filePath = Join-Path -Path $env:PIPELINE_WORKSPACE -ChildPath "environment.json"
      $json = Get-Content $filePath | Out-String | ConvertFrom-Json

      foreach($prop in $json.psobject.properties) {
        echo $prop.Name $prop.Value
        Write-Host("##vso[task.setvariable variable=$($prop.Name);isOutput=true]$($prop.Value)")
      }
    name: getBuildVariables
    displayName: 'Set build variables'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download integration tests pipeline artifact'
    inputs:
      artifact: connmodule-integrationtests-$(getBuildVariables.artifactVersion)

  - task: ExtractFiles@1
    displayName: 'Extract pipeline artifacts'
    inputs:
      archiveFilePatterns: |
        $(Pipeline.Workspace)/connmodule-integrationtests-$(getBuildVariables.artifactVersion).zip
      cleanDestinationFolder: false

  - task: PowerShell@2
    displayName: 'Install Test PreRequisite'
    inputs:
      targetType: 'inline'
      script: |
        Find-Module Az.DeviceProvisioningServices | Install-Module -Scope CurrentUser -Force  
        Get-InstalledModule -Name "Az.DeviceProvisioningServices"
        Find-Module AzureAD | Install-Module -Scope CurrentUser -Force  
        Get-InstalledModule -Name "AzureAD"
      pwsh: true

  - task: AzurePowerShell@5
    displayName: 'Fetch Variable Values'
    name: fetchvariablevalues
    inputs:
      azureSubscription: ${{ parameters.service_conn }}
      ScriptType: InlineScript
      Inline: |
        $apimHostName = ((Get-AzApiManagement -ResourceGroupName $(rgName) -Name $(apimName)).ProxyCustomHostnameConfiguration | Where-Object -FilterScript {$_.DefaultSslBinding -EQ 'True'}).Hostname
        $frontdoorHostName = (Get-AzFrontDoorCdnEndpoint -EndpointName $(frontdoorName) -ProfileName $(frontdoorName) -ResourceGroupName $(rgName)).HostName
        $apimbaseUrl = "https://$frontdoorHostName"         
        Write-Host "##vso[task.setvariable variable=apimbaseUrl]$apimbaseUrl"
      azurePowerShellVersion: LatestVersion

  - task: AzurePowerShell@5
    displayName: 'Run Tests'
    inputs:
      azureSubscription: ${{ parameters.service_conn }}
      ScriptType: 'InlineScript'
      Inline: |
        Import-Module Az.DeviceProvisioningServices -Force             
        Import-Module ./toolintegrations/traceability/scripts/customjsongeneratorfunction_pester.psm1 -Force
        $env:environment = "$(targetEnvironment)" ;  $env:locationshortcut = "$(locationShortcut)" ;  $env:subsriptionprefix = "$(subscriptionPrefix)"
        $env:apimurl = "$(apimbaseUrl)" ; $env:allowedversion = "$(allowedInstallerVersions)"
        $pesterConfiguration = New-PesterConfiguration
        $pesterConfiguration.Run.Path = "integrationtests/Tests/CloudComponents/DeviceManagement/deviceprovisioning.Tests.ps1"
        $pesterConfiguration.Run.PassThru = $true
        $pesterConfiguration.TestResult.Enabled = $true
        $pesterConfiguration.TestResult.OutputFormat = "NUnitXml"
        $pesterConfiguration.TestResult.OutputPath = "$(System.DefaultWorkingDirectory)/test-provision.xml"
        $resultdevProv = Invoke-Pester -Configuration $pesterConfiguration 
        $pesterConfiguration.Run.Path = "integrationtests/Tests/CloudComponents/DeviceManagement/renewalCertificate.Tests.ps1"
        $pesterConfiguration.Run.PassThru = $true
        $pesterConfiguration.TestResult.Enabled = $true
        $pesterConfiguration.TestResult.OutputFormat = "NUnitXml"
        $pesterConfiguration.TestResult.OutputPath = "$(System.DefaultWorkingDirectory)/test-renewalCertificate.xml"
        $pesterConfiguration.Output.Verbosity = "Detailed"
        $resultrencert = Invoke-Pester -Configuration $pesterConfiguration 
        $pesterConfiguration.Run.Path = "integrationtests/Tests/CloudComponents/DeviceManagement/customupdate.Tests.ps1"
        $pesterConfiguration.Run.PassThru = $true
        $pesterConfiguration.TestResult.Enabled = $true
        $pesterConfiguration.TestResult.OutputFormat = "NUnitXml"
        $pesterConfiguration.TestResult.OutputPath = "$(System.DefaultWorkingDirectory)/test-customupdate.xml"
        $pesterConfiguration.Output.Verbosity = "Detailed"
        $resultcustom = Invoke-Pester -Configuration $pesterConfiguration    
        New-Item -ItemType Directory -Force -Path $(Pipeline.Workspace)/devicemanagemeninttest
        customJson -results $resultrencert.Tests -outputFolderPath $(Pipeline.Workspace)/devicemanagemeninttest -outputFileName "TESTS-devicemanagementcert-integration-report.json"
        customJson -results $resultdevProv.Tests -outputFolderPath $(Pipeline.Workspace)/devicemanagemeninttest -outputFileName "TESTS-devicemanagementprov-integration-report.json"
        customJson -results $resultcustom.Tests -outputFolderPath $(Pipeline.Workspace)/devicemanagemeninttest -outputFileName "TESTS-devicemanagementcustom-integration-report.json"
      azurePowerShellVersion: 'LatestVersion'

  - task: ArchiveFiles@2
    displayName: 'Create zip with generated test report json'
    condition: |
      or (
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          eq(variables['isCreateTestCasesInAdo'], 'true')
      )
    inputs:
      rootFolderOrFile: '$(Pipeline.Workspace)/devicemanagemeninttest'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(Build.ArtifactStagingDirectory)/connmodule-devicemanagementinttestreports-$(regionSc)-$(getBuildVariables.artifactVersion).zip'
      replaceExistingArchive: true

  - task: PublishPipelineArtifact@1
    condition: |
      or (
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          eq(variables['isCreateTestCasesInAdo'], 'true')
      )
    displayName: 'Publish Pipeline artifact'
    inputs:
      path: '$(Build.ArtifactStagingDirectory)'
      artifact: 'connmodule-devicemanagementinttestreports-$(regionSc)-$(getBuildVariables.artifactVersion)'

  - task: PublishTestResults@2
    displayName: 'Publish Results'
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: 'test-provision.xml'
      failTaskOnFailedTests: true
      testRunTitle: 'Connectivity Module-Device Management-$(Build.SourceBranchName)-$(regionSc)-Integration Tests'
