$mypath = Split-Path -Parent $MyInvocation.MyCommand.Path
Import-Module "$mypath\..\CustomWait.psm1"
BeforeAll {
    $Script:SubscriptionPrefix = $env:subsriptionprefix
    $Script:environment = $env:environment
    $Script:locationShortCut = $env:locationshortcut
    $Script:resourceGroup = "$Script:SubscriptionPrefix-conm-$Script:environment-$Script:locationShortCut-resources-rg"
    $Script:iotHub = "$Script:SubscriptionPrefix-conm-$Script:environment-$Script:locationShortCut-iothub-aih"
    $Script:iotDeviceId = "$Script:SubscriptionPrefix-conm-$Script:environment-testdevice"
    $Script:moduleId = 'managementmodule'
    $Script:directMethodName = "GetHttpConnectivityStatus"
    $Script:networkdiagDirectMethod = "NetworkDiagnosis"
    $Script:hypervDeviceId = $env:regularUserHypervDeviceId
    $Script:VMresourceGroup = $env:vmrgname
    $Script:vmName = "${Script:SubscriptionPrefix}conm${Script:environment}${Script:locationShortCut}vmtestdevice";
    $Script:initialDesiredProperties = Get-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId"

}
Describe 'Management Module tests' {
    Context 'Direct Method' {
        It 'should be invoked successfully' { 
            $payload = '{"uri": "https://www.bing.com"}' 
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:directMethodName" -Payload "$payload" -ResponseTimeOut 20 -ConnectionTimeOut 15
            $response.Status | Should -Be "200"
            ($response.payload | ConvertFrom-Json).result | Should -Be "Executed direct method: Successful"
        } -Tag 'US#19378'
        It 'should return error when payload do not have absolute uri' {
            $payload = '{"uri": "www.bing.com"}' 
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:directMethodName" -Payload "$payload" -ResponseTimeOut 20 -ConnectionTimeOut 15
            $response.Status | Should -Be "400"
            ($response.payload | ConvertFrom-Json).result | Should -Be "Executed direct method: An invalid request URI was provided. Either the request URI must be an absolute URI or BaseAddress must be set."
        } -Tag 'US#19378'
        It 'should return error when payload is empty' {
            $payload = '{}' 
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:directMethodName" -Payload "$payload" -ResponseTimeOut 20 -ConnectionTimeOut 15
            $response.Status | Should -Be "400"
            ($response.payload | ConvertFrom-Json).result | Should -Be "Executed direct method: Either URI is not provided or it does not have a key 'Uri'."
        } -Tag 'US#19378'
        It 'should return error when payload attribute is missing' {
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:directMethodName" -ResponseTimeOut 20 -ConnectionTimeOut 15
            $response.Status | Should -Be "400"
            ($response.payload | ConvertFrom-Json).result | Should -Be "Executed direct method: Either URI is not provided or it does not have a key 'Uri'."
        } -Tag 'US#19378'
        It 'should return error when payload has no uri key' {
            $payload = '{"link": "www.bing.com"}'
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:directMethodName" -Payload "$payload" -ResponseTimeOut 20 -ConnectionTimeOut 15
            $response.Status | Should -Be "400"
            ($response.payload | ConvertFrom-Json).result | Should -Be "Executed direct method: Either URI is not provided or it does not have a key 'Uri'."
        } -Tag 'US#19378'
        It 'should return error when uri value is white spaces' {
            $payload = '{"uri": " " }'
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:directMethodName" -Payload "$payload" -ResponseTimeOut 20 -ConnectionTimeOut 15
            $response.Status | Should -Be "400"
            ($response.payload | ConvertFrom-Json).result | Should -Be "Executed direct method: Either URI is not provided or it does not have a key 'Uri'."
        } -Tag 'US#19378'
                
    }

    Context 'Infrastructure details' {
        BeforeAll {
            $Script:query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            $initialDesiredProperties = Get-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId"
            $main = @{}
            $main.Add("current", $initialDesiredProperties.Properties.Desired["initial"])
            $main.current["messageDelay"] = 2
            Write-Host($main.current["messageDelay"].ToString())
            
            CustomWait -iotDeviceId "$Script:iotDeviceId" -moduleId "$Script:moduleId" -resourceGroup "$Script:resourceGroup" -iotHub "$Script:iotHub" -updatedDesiredProperty $main -property "infrastructure"
            
            $Script:queryResult1 = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query"
            $Script:messageDelay1 = ($Script:queryResult1 | ConvertFrom-Json).properties.desired.current.messageDelay
            Start-Sleep ($Script:messageDelay1 * 60) #Converting sleep time into Seconds as MessageDelay is in Minutes
            $Script:queryResult2 = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query"
        }
        It 'should be present in the reported properties' {                   
            # Verifying the reported Infrastructure properties are not null in the first period
            ($Script:queryResult1 | ConvertFrom-Json).properties.reported.TotalMemory | Should -Not -BeNullOrEmpty
            ($Script:queryResult1 | ConvertFrom-Json).properties.reported.AvailableMemory | Should -Not -BeNullOrEmpty
            ($Script:queryResult1 | ConvertFrom-Json).properties.reported.IPAddress | Should -Not -BeNullOrEmpty
            ($Script:queryResult1 | ConvertFrom-Json).properties.reported.HostName | Should -Not -BeNullOrEmpty
            # Verifying the reported Infrastructure properties are not null in the next period
            ($Script:queryResult2 | ConvertFrom-Json).properties.reported.TotalMemory | Should -Not -BeNullOrEmpty
            ($Script:queryResult2 | ConvertFrom-Json).properties.reported.AvailableMemory | Should -Not -BeNullOrEmpty
            ($Script:queryResult2 | ConvertFrom-Json).properties.reported.IPAddress | Should -Not -BeNullOrEmpty
            ($Script:queryResult2 | ConvertFrom-Json).properties.reported.HostName | Should -Not -BeNullOrEmpty              
        } -Tag 'US#19378'
        It 'should be reported periodically' {   
            #Get the timeStamps of the Infrastructure details in Reported properties in the first period
            $TotalMemoryTimestamp1 = [DateTime] ($Script:queryResult1 | ConvertFrom-Json).properties.reported.'$metadata'.TotalMemory.'$lastUpdated'
            $AvailableMemoryTimestamp1 = [DateTime] ($Script:queryResult1 | ConvertFrom-Json).properties.reported.'$metadata'.AvailableMemory.'$lastUpdated'
            $IPAddressTimestamp1 = [DateTime] ($Script:queryResult1 | ConvertFrom-Json).properties.reported.'$metadata'.IPAddress.'$lastUpdated'
            $HostNameTimestamp1 = [DateTime] ($Script:queryResult1 | ConvertFrom-Json).properties.reported.'$metadata'.HostName.'$lastUpdated'
            #Get the timeStamps of the Infrastructure details in Reported properties in the next period
            $TotalMemoryTimestamp2 = [DateTime] ($Script:queryResult2 | ConvertFrom-Json).properties.reported.'$metadata'.TotalMemory.'$lastUpdated'
            $AvailableMemoryTimestamp2 = [DateTime] ($Script:queryResult2 | ConvertFrom-Json).properties.reported.'$metadata'.AvailableMemory.'$lastUpdated'
            $IPAddressTimestamp2 = [DateTime] ($Script:queryResult2 | ConvertFrom-Json).properties.reported.'$metadata'.IPAddress.'$lastUpdated'
            $HostNameTimestamp2 = [DateTime] ($Script:queryResult2 | ConvertFrom-Json).properties.reported.'$metadata'.HostName.'$lastUpdated'
            #Verify the Message Delay
            $min = $Script:messageDelay1;
            $max = $Script:messageDelay1 + 1; 
            Write-Host ("Infrastructure details should be reported periodically")
            Write-Host("TotalMemoryTimestamp1 $TotalMemoryTimestamp1  TotalMemoryTimestamp2 $TotalMemoryTimestamp2")
            Write-Host("AvailableMemoryTimestamp1  $AvailableMemoryTimestamp1   AvailableMemoryTimestamp2  $AvailableMemoryTimestamp2 ")
            Write-Host("IPAddressTimestamp1  $IPAddressTimestamp1   IPAddressTimestamp2  $IPAddressTimestamp2 ")
            Write-Host("HostNameTimestamp1  $HostNameTimestamp1   HostNameTimestamp2  $HostNameTimestamp2 ")
            Write-Host("Min - $min ; Max - $max")
            [int]($TotalMemoryTimestamp2 - $TotalMemoryTimestamp1).TotalMinutes | Should -BeIn ($min..$max)
            [int]($AvailableMemoryTimestamp2 - $AvailableMemoryTimestamp1).TotalMinutes | Should -BeIn ($min..$max)
            [int]($IPAddressTimestamp2 - $IPAddressTimestamp1).TotalMinutes | Should -BeIn ($min..$max)
            [int]($HostNameTimestamp2 - $HostNameTimestamp1).TotalMinutes | Should -BeIn ($min..$max)
        } -Tag 'US#19378'
    }
    Context 'EndPoint Reachability' {
        BeforeAll {
            $Script:query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            $initialDesiredProperties = Get-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId"
            $main = @{}
            $main.Add("current", $initialDesiredProperties.Properties.Desired["initial"])
            $main.current["messageDelay"] = 2
            $main.current["configuredEndpoints"] = "https://www.bing.com"
            CustomWait -iotDeviceId "$Script:iotDeviceId" -moduleId "$Script:moduleId" -resourceGroup "$Script:resourceGroup" -iotHub "$Script:iotHub" -updatedDesiredProperty $main -property "endpointreachability"

            $Script:queryResult3 = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query"
            $Script:messageDelay2 = ($Script:queryResult3 | ConvertFrom-Json).properties.desired.current.messageDelay
            Start-Sleep ($Script:messageDelay2 * 60) #Converting sleep time into Seconds as MessageDelay is in Minutes
            $Script:queryResult4 = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query"
        } 
        It 'should be successfull and present in reported properties' {
            # verify the presence of EndPoint reachability reported property
            ($Script:queryResult3 | ConvertFrom-Json).properties.reported.configuredEndpoints | Should -Not -BeNullOrEmpty
            ($Script:queryResult3 | ConvertFrom-Json).properties.reported.messageDelay | Should -Not -BeNullOrEmpty
            # verify the cloud to device update
            ($Script:queryResult4 | ConvertFrom-Json).properties.reported.configuredEndpoints -Match "https:\/\/www\.bing\.com" | Should -Be "True"
            # verify the device to cloud update
            ($Script:queryResult4 | ConvertFrom-Json).properties.reported.EndPointReachability -Match "SUCCESS" | Should -Be "True"
        } -Tag 'US#19378'
        It 'should be reported periodically' {
            $EndPointReachabilityTimestamp1 = [DateTime] ($Script:queryResult3 | ConvertFrom-Json).properties.reported.'$metadata'.EndPointReachability.'$lastUpdated'
            $EndPointReachabilityTimestamp2 = [DateTime] ($Script:queryResult4 | ConvertFrom-Json).properties.reported.'$metadata'.EndPointReachability.'$lastUpdated'
            $min = $Script:messageDelay2;
            $max = $Script:messageDelay2 + 1; 
            Write-Host("EndPoint Reachability - should be reported periodically")
            Write-Host("Min - $min ; Max - $max")
            Write-Host("EndPoint Reachability Timestamp2  - $EndPointReachabilityTimestamp2  ; EndPoint Reachability Timestamp1  - $EndPointReachabilityTimestamp1")
            [int]($EndPointReachabilityTimestamp2 - $EndPointReachabilityTimestamp1).TotalMinutes | Should -BeIn ($min..$max)
        } -Tag 'US#19378'
    }

    Context 'Firewall Implementation' {
        It 'Verify default ports - 8888/tcp,11111/tcp,5353/udp are open' { 
            $Script:query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            $Script:queryResult = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query" 
            $desiredAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.desired.initial.allowedPorts
            $desiredAllowedPorts |  Should -Be "8888/tcp,11111/tcp,5353/udp,7777/tcp,3001/tcp,7779/tcp,7778/tcp,8080/tcp"
            $reportedAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.reported.allowedPorts
            $reportedAllowedPorts |  Should -Be "8888/tcp,11111/tcp,5353/udp,7777/tcp,3001/tcp,7779/tcp,7778/tcp,8080/tcp"

            #Commenting the below code which verifies the allowed ports in connectivity module VM
            #    verify nmap -p <portnumber> <ip of CM VM>
            #    verify cmportconfig.xml is present under tempdata01 and the xml containing the required ports
            #    verify sudo firewall-cmd --list-all  
            #         $remoteCmd = @"
            #             sudo firewall-cmd --list-all | grep "ports:"
            # "@      
            #         Set-Content -Path .\RemoteCommand.bash -Value $remoteCmd
            #         $commandOutput = Invoke-AzVMRunCommand -ResourceGroupName "$Script:VMresourceGroup" -Name "$Script:vmName" -CommandId 'RunShellScript' -ScriptPath .\RemoteCommand.bash -Verbose
            #         Remove-Item .\RemoteCommand.bash
            #         $commandOutput.Value[0].Message.contains("8888/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("11111/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("5353/tcp") | Should -Be "True"
        } -Tag 'US#74413', 'US#41601', 'US#353786'

        It 'Verify allowed ports are successfully configured for the Connectivity Module VM when valid ports and protocols are used' { 
            $initialDesiredProperties = Get-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId"
            $main = @{}
            $main.Add("current", $initialDesiredProperties.Properties.Desired["initial"])
            $main.current["allowedPorts"] = "0/tcp,9999/tcp,5454/udp,65535/udp"
            $Script:updatedModuleTwin = Update-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Desired $main -Partial
            Start-Sleep (60)
            $Script:query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            $Script:queryResult = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query" 
            $desiredAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.desired.current.allowedPorts
            $desiredAllowedPorts | Should -Be "0/tcp,9999/tcp,5454/udp,65535/udp"
            $reportedAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.reported.allowedPorts
            $reportedAllowedPorts | Should -Be "0/tcp,9999/tcp,5454/udp,65535/udp"

            #Commenting the below code which verifies the allowed ports in connectivity module VM
            #         $remoteCmd = @"
            #             sudo firewall-cmd --list-all | grep "ports:"
            # "@      
            #         Set-Content -Path .\RemoteCommand.bash -Value $remoteCmd
            #         $commandOutput = Invoke-AzVMRunCommand -ResourceGroupName "$Script:VMresourceGroup" -Name "$Script:vmName" -CommandId 'RunShellScript' -ScriptPath .\RemoteCommand.bash -Verbose
            #         Remove-Item .\RemoteCommand.bash
            #         $commandOutput.Value[0].Message.contains("8888/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("11111/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("5353/tcp") | Should -Be "True"
        } -Tag 'US#41601'

        It 'Verify allowed ports are NOT successfully configured for the Connectivity Module VM when invalid protocol is used' { 
            $initialDesiredProperties = Get-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId"
            $main = @{}
            $main.Add("current", $initialDesiredProperties.Properties.Desired["initial"])
            $main.current["allowedPorts"] = "1010/tp"
            $Script:updatedModuleTwin = Update-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Desired $main -Partial
            Start-Sleep (60)
            $Script:query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            $Script:queryResult = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query" 
            $desiredAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.desired.current.allowedPorts
            $desiredAllowedPorts | Should -Be "1010/tp"
            $reportedAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.reported.allowedPorts
            $reportedAllowedPorts | Should -Be "0/tcp,9999/tcp,5454/udp,65535/udp"

            #Commenting the below code which verifies the allowed ports in connectivity module VM
            #         $remoteCmd = @"
            #             sudo firewall-cmd --list-all | grep "ports:"
            # "@      
            #         Set-Content -Path .\RemoteCommand.bash -Value $remoteCmd
            #         $commandOutput = Invoke-AzVMRunCommand -ResourceGroupName "$Script:VMresourceGroup" -Name "$Script:vmName" -CommandId 'RunShellScript' -ScriptPath .\RemoteCommand.bash -Verbose
            #         Remove-Item .\RemoteCommand.bash
            #         $commandOutput.Value[0].Message.contains("8888/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("11111/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("5353/tcp") | Should -Be "True"
        } -Tag 'US#41601'

        It 'Verify allowed ports are NOT successfully configured for the Connectivity Module VM when invalid port is used' { 
            $initialDesiredProperties = Get-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId"
            $main = @{}
            $main.Add("current", $initialDesiredProperties.Properties.Desired["initial"])
            $main.current["allowedPorts"] = "65536/tcp"
            $Script:updatedModuleTwin = Update-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Desired $main -Partial
            Start-Sleep (60)
            $Script:query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            $Script:queryResult = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query" 
            $desiredAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.desired.current.allowedPorts
            $desiredAllowedPorts | Should -Be "65536/tcp"
            $reportedAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.reported.allowedPorts
            $reportedAllowedPorts | Should -Be "0/tcp,9999/tcp,5454/udp,65535/udp"

            #Commenting the below code which verifies the allowed ports in connectivity module VM
            #         $remoteCmd = @"
            #             sudo firewall-cmd --list-all | grep "ports:"
            # "@      
            #         Set-Content -Path .\RemoteCommand.bash -Value $remoteCmd
            #         $commandOutput = Invoke-AzVMRunCommand -ResourceGroupName "$Script:VMresourceGroup" -Name "$Script:vmName" -CommandId 'RunShellScript' -ScriptPath .\RemoteCommand.bash -Verbose
            #         Remove-Item .\RemoteCommand.bash
            #         $commandOutput.Value[0].Message.contains("8888/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("11111/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("5353/tcp") | Should -Be "True"
        } -Tag 'US#41601'

        It 'Verify allowed ports are NOT successfully configured for the Connectivity Module VM when one port is invalid and others are valid' { 
            $initialDesiredProperties = Get-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId"
            $main = @{}
            $main.Add("current", $initialDesiredProperties.Properties.Desired["initial"])
            $main.current["allowedPorts"] = "5/tcp,-1/tcp"
            $Script:updatedModuleTwin = Update-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Desired $main -Partial
            Start-Sleep (60)
            $Script:query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            $Script:queryResult = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query" 
            $desiredAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.desired.current.allowedPorts
            $desiredAllowedPorts | Should -Be "5/tcp,-1/tcp"
            $reportedAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.reported.allowedPorts
            $reportedAllowedPorts | Should -Be "0/tcp,9999/tcp,5454/udp,65535/udp"

            #Commenting the below code which verifies the allowed ports in connectivity module VM
            #         $remoteCmd = @"
            #             sudo firewall-cmd --list-all | grep "ports:"
            # "@      
            #         Set-Content -Path .\RemoteCommand.bash -Value $remoteCmd
            #         $commandOutput = Invoke-AzVMRunCommand -ResourceGroupName "$Script:VMresourceGroup" -Name "$Script:vmName" -CommandId 'RunShellScript' -ScriptPath .\RemoteCommand.bash -Verbose
            #         Remove-Item .\RemoteCommand.bash
            #         $commandOutput.Value[0].Message.contains("8888/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("11111/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("5353/tcp") | Should -Be "True"
        } -Tag 'US#41601'

        It 'Verify allowed ports are NOT successfully configured for the Connectivity Module VM when some random characters are passed' { 
            $initialDesiredProperties = Get-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId"
            $main = @{}
            $main.Add("current", $initialDesiredProperties.Properties.Desired["initial"])
            $main.current["allowedPorts"] = "1tcp"
            $Script:updatedModuleTwin = Update-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Desired $main -Partial
            Start-Sleep (60)
            $Script:query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            $Script:queryResult = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query" 
            $desiredAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.desired.current.allowedPorts
            $desiredAllowedPorts | Should -Be "1tcp"
            $reportedAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.reported.allowedPorts
            $reportedAllowedPorts | Should -Be "0/tcp,9999/tcp,5454/udp,65535/udp"

            #Commenting the below code which verifies the allowed ports in connectivity module VM
            #         $remoteCmd = @"
            #             sudo firewall-cmd --list-all | grep "ports:"
            # "@      
            #         Set-Content -Path .\RemoteCommand.bash -Value $remoteCmd
            #         $commandOutput = Invoke-AzVMRunCommand -ResourceGroupName "$Script:VMresourceGroup" -Name "$Script:vmName" -CommandId 'RunShellScript' -ScriptPath .\RemoteCommand.bash -Verbose
            #         Remove-Item .\RemoteCommand.bash
            #         $commandOutput.Value[0].Message.contains("8888/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("11111/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("5353/tcp") | Should -Be "True"
        } -Tag 'US#41601'

        It 'Verify allowed ports are NOT successfully configured for the Connectivity Module VM when port is an empty string' { 
            $initialDesiredProperties = Get-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId"
            $main = @{}
            $main.Add("current", $initialDesiredProperties.Properties.Desired["initial"])
            $main.current["allowedPorts"] = ""
            $Script:updatedModuleTwin = Update-AzIotHubModuleTwin -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:iotDeviceId" -ModuleId "$Script:moduleId" -Desired $main -Partial
            Start-Sleep (60)
            $Script:query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            $Script:queryResult = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$Script:query" 
            $desiredAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.desired.current.allowedPorts
            $desiredAllowedPorts | Should -Be ""
            $reportedAllowedPorts = ($Script:queryResult | ConvertFrom-Json).properties.reported.allowedPorts
            $reportedAllowedPorts | Should -Be ""

            #Commenting the below code which verifies the allowed ports in connectivity module VM
            #         $remoteCmd = @"
            #             sudo firewall-cmd --list-all | grep "ports:"
            # "@      
            #         Set-Content -Path .\RemoteCommand.bash -Value $remoteCmd
            #         $commandOutput = Invoke-AzVMRunCommand -ResourceGroupName "$Script:VMresourceGroup" -Name "$Script:vmName" -CommandId 'RunShellScript' -ScriptPath .\RemoteCommand.bash -Verbose
            #         Remove-Item .\RemoteCommand.bash
            #         $commandOutput.Value[0].Message.contains("8888/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("11111/tcp") | Should -Be "True"
            #         $commandOutput.Value[0].Message.contains("5353/tcp") | Should -Be "True"
        } -Tag 'US#41601'

    }

    Context 'Extended status information' {

    
        It 'IP and Mac address and CM uptime should be reported in Module Twin' {
            $main = @{}
            $main.Add("current", $Script:initialDesiredProperties.Properties.Desired["initial"])
            $main.current["messageDelay"] = 2
    
            update-AzIotHubModuleTwin -ResourceGroupName "$resourceGroup" -IotHubName "$iotHub" -DeviceId "$iotDeviceId" -ModuleId "$moduleId" -Desired $main -Partial
             
            $query = "select * from devices.modules where devices.deviceId = '$Script:iotDeviceId' and moduleId='$Script:moduleId'"
            Start-Sleep (2 * 60)
            $queryResult = Invoke-AzIotHubQuery -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -Query "$query"
            # Verify reported properties
                ($queryResult | ConvertFrom-Json).properties.reported.IPAddress | Should -Not -BeNullOrEmpty
                ($queryResult | ConvertFrom-Json).properties.reported.MACAddress | Should -Not -BeNullOrEmpty
                ($queryResult | ConvertFrom-Json).properties.reported.UptimeUTC | Should -Not -BeNullOrEmpty
                          
                
            # Verify IPAddress ConnectivityModule VM
            $remoteCmd = @"
                  sudo /sbin/ifconfig eth0 | grep 'inet' | cut -d: -f2 | awk '{print `$2}'
"@      
            Set-Content -Path .\RemoteCommand.bash -Value $remoteCmd
            $commandOutput = Invoke-AzVMRunCommand -ResourceGroupName "$Script:VMresourceGroup" -Name "$Script:vmName" -CommandId 'RunShellScript' -ScriptPath .\RemoteCommand.bash -Verbose
            Remove-Item .\RemoteCommand.bash
    
            $commandOutput.Value[0].Message.contains(($queryResult | ConvertFrom-Json).properties.reported.IPAddress) | Should -Be "True"
    
    
            # Verify MAC address ConnectivityModule VM
            $remoteCmd = @"
                sudo /sbin/ifconfig eth0 | grep 'ether' | awk '{print `$2}'
"@      
            Set-Content -Path .\RemoteCommand.bash -Value $remoteCmd
            $commandOutput = Invoke-AzVMRunCommand -ResourceGroupName "$Script:VMresourceGroup" -Name "$Script:vmName" -CommandId 'RunShellScript' -ScriptPath .\RemoteCommand.bash -Verbose
            Remove-Item .\RemoteCommand.bash
    
            $commandOutput.Value[0].Message.Replace(":", "").ToUpper().contains(($queryResult | ConvertFrom-Json).properties.reported.MACAddress) | Should -Be "True"
    
    
    
        } -Tag 'US#177344'
    } 

    Context 'Network Diagnosis Direct Method' {
        It 'should be invoked successfully for the diagnosis type Ping' { 
            $payload = '{ "diagnosisType": "Ping", "destinationAddress": "127.0.0.1"}' 
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:hypervDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:networkdiagDirectMethod" -Payload "$payload" -ResponseTimeOut 60 -ConnectionTimeOut 60
            $response.Status | Should -Be "200"
                ($response.payload | ConvertFrom-Json).result | Should -BeLike "PING 127.0.0.1 (127.0.0.1)*"
        } -Tag 'US#308168'
        It 'should be invoked successfully for the diagnosis type TraceRoute' { 
            $payload = '{ "diagnosisType": "TraceRoute", "destinationAddress": "127.0.0.1"}' 
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:hypervDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:networkdiagDirectMethod" -Payload "$payload" -ResponseTimeOut 60 -ConnectionTimeOut 60
            $response.Status | Should -Be "200"
                ($response.payload | ConvertFrom-Json).result | Should -BeLike "traceroute to 127.0.0.1 (127.0.0.1)*"
        } -Tag 'US#308168'
        It 'should return error when payload do not have diagnosisType for the Network diagnosis DirectMethod' {
            $payload = '{"destinationAddress": "127.0.0.1"}' 
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:hypervDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:networkdiagDirectMethod" -Payload "$payload" -ResponseTimeOut 60 -ConnectionTimeOut 60
            $response.Status | Should -Be "400"
                ($response.payload | ConvertFrom-Json).result | Should -Be "Network Diagnosis method and IPAddress or FQDN are mandatory."
        } -Tag 'US#308168'
        It 'should return error when payload is empty for the Network diagnosis DirectMethod' {
            $payload = '{}' 
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:hypervDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:networkdiagDirectMethod" -Payload "$payload" -ResponseTimeOut 60 -ConnectionTimeOut 60
            $response.Status | Should -Be "400"
                ($response.payload | ConvertFrom-Json).result | Should -Be "Network Diagnosis method and IPAddress or FQDN are mandatory."
        } -Tag 'US#308168'
        It 'should return error when payload attribute is missing for the Network diagnosis DirectMethod' {
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:hypervDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:networkdiagDirectMethod" -ResponseTimeOut 60 -ConnectionTimeOut 60
            $response.Status | Should -Be "400"
                ($response.payload | ConvertFrom-Json).result | Should -Be "Network Diagnosis method and IPAddress or FQDN are mandatory."
        } -Tag 'US#308168'
        It 'should return error when payload does not have destinationAddress for the Network diagnosis DirectMethod' {
            $payload = '{ "diagnosisType": "Ping"}'
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:hypervDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:networkdiagDirectMethod" -Payload "$payload" -ResponseTimeOut 60 -ConnectionTimeOut 60
            $response.Status | Should -Be "400"
                ($response.payload | ConvertFrom-Json).result | Should -Be "Network Diagnosis method and IPAddress or FQDN are mandatory."
        } -Tag 'US#308168'
        It 'should return error when diagnosisType value is white spaces for the Network diagnosis DirectMethod' {
            $payload = '{ "diagnosisType": " ", "destinationAddress": "127.0.0.1"}'
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:hypervDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:networkdiagDirectMethod" -Payload "$payload" -ResponseTimeOut 60 -ConnectionTimeOut 60
            $response.Status | Should -Be "400"
                ($response.payload | ConvertFrom-Json).result | Should -Be "Network Diagnosis method and IPAddress or FQDN are mandatory."
        } -Tag 'US#308168'
    
        It 'should return error when destinationAddress value is white spaces for the Network diagnosis DirectMethod' {
            $payload = '{ "diagnosisType": "Ping", "destinationAddress": " "}'
            $response = Invoke-AzIotHubModuleMethod -ResourceGroupName "$Script:resourceGroup" -IotHubName "$Script:iotHub" -DeviceId "$Script:hypervDeviceId" -ModuleId "$Script:moduleId" -Name "$Script:networkdiagDirectMethod" -Payload "$payload" -ResponseTimeOut 60 -ConnectionTimeOut 60
            $response.Status | Should -Be "400"
                ($response.payload | ConvertFrom-Json).result | Should -Be "Network Diagnosis method and IPAddress or FQDN are mandatory."
        } -Tag 'US#308168'
                    
    }

}