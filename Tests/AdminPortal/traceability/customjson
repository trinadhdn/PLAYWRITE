<#
    .SYNOPSIS
        Generate custom test report  

    .EXAMPLE
        PS C:\> .\customJson.ps1 -results <value> -outputFolderPath <value> -outputFileName <value>

    .PARAMETER results
        test results.
    .PARAMETER outputFolderName
        outputFolderName.
    .PARAMETER outputFileName
        outputFileName.
#>

$paramObj=Get-Content "C:\Projects\ConnectivityModule\playwrightPoc\testresults\test-results.json" |ConvertFrom-Json
Write-Host $paramObj
$suites=$paramObj.suites
Write-Host $suites

Function customJson
{  
    [CmdLetBinding()]             
    Param
    (
        [Parameter(Mandatory=$True)]
        $results,

        [Parameter(Mandatory=$True)]
        [string] $outputFolderPath,

        [Parameter(Mandatory=$True)]
        [string] $outputFileName
    )
 

        $count =0
     
        $main=[System.Collections.ArrayList]@() 
        for($i = 0; $i -lt $results.Count; $i++){       
            
            
            
            if($results[$i].suites[0].specs.Count -gt 0){
                
                 
                for($j=0;$j -lt $results[$i].suites[0].specs.Count; $j++){
                    $sub=@{}
                    $sub.Add("displayName",$results[$i].suites[0].specs[$j].title.split('@')[0].Trim())
                    $sub.Add("status",$results[$i].suites[0].specs[$j].tests[0].results[0].status)
                    $sub.Add("id","spec"+ $count++)

                    $tags=[System.Collections.ArrayList]@()
                    for($k=0;$k -lt $results[$i].suites[0].specs[$j].tags.Count; $k++){
                        $subTags=@{}
                        $subTags.Add("name","tag")
                        $subTags.Add("value",$results[$i].suites[0].specs[$j].tags[$k])
                        $tagString = $subTags|ConvertTo-Json
                        $tags.Add($tagString.replace("\r","").replace("\n",""))
                    }
                   
                    
                    $sub.Add("labels",$tags)    
                    $sub.Add("endTime",$null)
                    $sub.Add("className",$results[$i].suites[0].title +" " + $results[$i].suites[0].specs[$j].title.split('@')[0].Trim())
                    $sub.Add("methodName",$results[$i].suites[0].title +" " + $results[$i].suites[0].specs[$j].title.split('@')[0].Trim())              
                    $sub.Add("startTime",$null)
                    $sub.Add("environment","Windows 10 + chrome")
                    $string = $sub|ConvertTo-Json
                    $main.Add($string.replace("\r","").replace("\n","").replace("\","").replace("`"{","{").replace("}`"","}"))            
                                        
                }         
            }      
            

    }

     $finalOutputFileName = "$($outputFileName)_$($Counter).json"

    New-Item -ItemType Directory -Force -Path .\$outputFolderName

    $final = $main -Join ","     
    "["+$final+"]"  | out-file -filepath .\$outputFolderName\$finalOutputFileName
}

$counter= 1
Get-ChildItem .\ -Filter *.trx | 
Foreach-Object {
    Write-Host $_.FullName
    Write-Host $counter
    $counter++
    [xml]$XmlDocument = Get-Content -Path $_.FullName
    customJson -Results $XmlDocument.TestRun.Results.UnitTestResult -Counter $counter
}


$scriptContent = customJson -results $suites -outputFolderPath testOutput -outputFileName outputJson.json
